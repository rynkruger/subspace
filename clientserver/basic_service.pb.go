// Code generated by protoc-gen-go.
// source: clientserver/basic_service.proto
// DO NOT EDIT!

/*
Package clientserver is a generated protocol buffer package.

It is generated from these files:
	clientserver/basic_service.proto

It has these top-level messages:
	Command
	ServerResponse
*/
package clientserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	CommandText string `protobuf:"bytes,1,opt,name=commandText" json:"commandText,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetCommandText() string {
	if m != nil {
		return m.CommandText
	}
	return ""
}

type ServerResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *ServerResponse) Reset()                    { *m = ServerResponse{} }
func (m *ServerResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()               {}
func (*ServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "clientserver.Command")
	proto.RegisterType((*ServerResponse)(nil), "clientserver.ServerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessagesToServer service

type MessagesToServerClient interface {
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessagesToServer_SendMessagesClient, error)
}

type messagesToServerClient struct {
	cc *grpc.ClientConn
}

func NewMessagesToServerClient(cc *grpc.ClientConn) MessagesToServerClient {
	return &messagesToServerClient{cc}
}

func (c *messagesToServerClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessagesToServer_SendMessagesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesToServer_serviceDesc.Streams[0], c.cc, "/clientserver.MessagesToServer/SendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesToServerSendMessagesClient{stream}
	return x, nil
}

type MessagesToServer_SendMessagesClient interface {
	Send(*Command) error
	CloseAndRecv() (*ServerResponse, error)
	grpc.ClientStream
}

type messagesToServerSendMessagesClient struct {
	grpc.ClientStream
}

func (x *messagesToServerSendMessagesClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagesToServerSendMessagesClient) CloseAndRecv() (*ServerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessagesToServer service

type MessagesToServerServer interface {
	SendMessages(MessagesToServer_SendMessagesServer) error
}

func RegisterMessagesToServerServer(s *grpc.Server, srv MessagesToServerServer) {
	s.RegisterService(&_MessagesToServer_serviceDesc, srv)
}

func _MessagesToServer_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagesToServerServer).SendMessages(&messagesToServerSendMessagesServer{stream})
}

type MessagesToServer_SendMessagesServer interface {
	SendAndClose(*ServerResponse) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type messagesToServerSendMessagesServer struct {
	grpc.ServerStream
}

func (x *messagesToServerSendMessagesServer) SendAndClose(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagesToServerSendMessagesServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessagesToServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientserver.MessagesToServer",
	HandlerType: (*MessagesToServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessages",
			Handler:       _MessagesToServer_SendMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientserver/basic_service.proto",
}

func init() { proto.RegisterFile("clientserver/basic_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x4f, 0x4a, 0x2c, 0xce, 0x4c, 0x8e, 0x07,
	0x71, 0x32, 0x93, 0x53, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x90, 0x55, 0x28, 0x69,
	0x73, 0xb1, 0x3b, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x08, 0x29, 0x70, 0x71, 0x27, 0x43, 0x98,
	0x21, 0xa9, 0x15, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0xc8, 0x42, 0x4a, 0x3a, 0x5c,
	0x7c, 0xc1, 0x60, 0x6d, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x52, 0x5c, 0x1c,
	0x45, 0x50, 0x36, 0x54, 0x03, 0x9c, 0x6f, 0x14, 0xcd, 0x25, 0xe0, 0x9b, 0x5a, 0x5c, 0x9c, 0x98,
	0x9e, 0x5a, 0x1c, 0x92, 0x0f, 0xd1, 0x27, 0xe4, 0xce, 0xc5, 0x13, 0x9c, 0x9a, 0x97, 0x02, 0x13,
	0x17, 0x12, 0xd5, 0x43, 0x76, 0x8d, 0x1e, 0xd4, 0x29, 0x52, 0x32, 0xa8, 0xc2, 0xa8, 0x96, 0x2a,
	0x31, 0x68, 0x30, 0x26, 0xb1, 0x81, 0x3d, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x28,
	0xfd, 0xf6, 0xf0, 0x00, 0x00, 0x00,
}
